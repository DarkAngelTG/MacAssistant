//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/assistant/embedded/v1alpha2/embedded_assistant.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Assistant_Embedded_V1alpha2_EmbeddedAssistantServiceClient, then call methods of this protocol to make API calls.
internal protocol Google_Assistant_Embedded_V1alpha2_EmbeddedAssistantService {
  func assist(callOptions: CallOptions?, handler: @escaping (Google_Assistant_Embedded_V1alpha2_AssistResponse) -> Void) -> BidirectionalStreamingCall<Google_Assistant_Embedded_V1alpha2_AssistRequest, Google_Assistant_Embedded_V1alpha2_AssistResponse>
}

internal final class Google_Assistant_Embedded_V1alpha2_EmbeddedAssistantServiceClient: GRPCClient, Google_Assistant_Embedded_V1alpha2_EmbeddedAssistantService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the google.assistant.embedded.v1alpha2.EmbeddedAssistant service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous bidirectional-streaming call to Assist.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func assist(callOptions: CallOptions? = nil, handler: @escaping (Google_Assistant_Embedded_V1alpha2_AssistResponse) -> Void) -> BidirectionalStreamingCall<Google_Assistant_Embedded_V1alpha2_AssistRequest, Google_Assistant_Embedded_V1alpha2_AssistResponse> {
    return self.makeBidirectionalStreamingCall(path: "/google.assistant.embedded.v1alpha2.EmbeddedAssistant/Assist",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}

